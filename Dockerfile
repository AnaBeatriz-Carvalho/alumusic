# ===================================
# Est√°gio 1: Build - O Construtor üë∑
# ===================================
# Usamos uma imagem completa para ter as ferramentas de compila√ß√£o
FROM python:3.10-bullseye as builder

# Instala as ferramentas necess√°rias para compilar depend√™ncias
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    gcc

# Define o diret√≥rio de trabalho
WORKDIR /app

# Instala as depend√™ncias em um ambiente virtual para isolamento
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copia e instala os requirements (aproveitando o cache do Docker)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# ===================================
# Est√°gio 2: Final - A Aplica√ß√£o üöÄ
# ===================================
# Usamos uma imagem 'slim' que √© muito menor e mais segura
FROM python:3.10-slim-bullseye

# Define o diret√≥rio de trabalho
WORKDIR /app

# Copia APENAS o ambiente virtual com as depend√™ncias j√° instaladas do est√°gio de build
# N√£o precisamos mais do gcc, build-essential, etc.
COPY --from=builder /opt/venv /opt/venv

# Copia o c√≥digo da sua aplica√ß√£o
COPY . .

# Ativa o ambiente virtual para todos os comandos subsequentes
ENV PATH="/opt/venv/bin:$PATH"

# Exp√µe as portas que nossos servi√ßos usar√£o (Flask e Streamlit)
EXPOSE 5000 8501
