version: '3.9'

services:
  # O serviÃ§o da API serÃ¡ o responsÃ¡vel por construir nossa imagem compartilhada
  api:
    build: .
    image: alumusic-app
    container_name: alumusic_api
    ports:
      - "5001:5000"
    env_file:
      - .env
    environment:
      - FLASK_APP=app
    command: >
      sh -c "flask db upgrade && gunicorn --bind 0.0.0.0:5000 'app:create_app()'"
    depends_on:
      alumusic:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    image: alumusic-app
    container_name: alumusic_worker
    command: celery -A celery_worker.celery worker --loglevel=info
    env_file:
      - .env
    
    depends_on:
      redis:
        condition: service_healthy
      alumusic:
        condition: service_healthy

  streamlit:
    image: alumusic-app  # REUTILIZAMOS a imagem, sem 'build'
    container_name: alumusic_front
    ports:
      - "8501:8501"
    env_file:
      - .env
    command: streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0 # Comando do Streamlit
    depends_on:
      api:
        condition: service_started # Espera a API iniciar
      alumusic:
        condition: service_healthy # Espera o banco ficar pronto

  alumusic:
    image: postgres:16
    container_name: alumusic
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # ðŸ‘‡ ESTE BLOCO Ã‰ ESSENCIAL ðŸ‘‡
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: alumusic_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
